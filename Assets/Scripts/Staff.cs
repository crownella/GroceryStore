//%GenSrc:1:IerPsaHMEEWRCpCDeV8ysg
/*
 * This code was generated by InstinctAI.
 *
 * It is safe to edit this file.
 */

namespace instinctai.usr.behaviours
{
    using UnityEngine;
    using com.kupio.instinctai;

    public partial class Staff : MonoBehaviour
    {
        private Aisle[] aisles;
        public int lastCheckedAisleNumber = -1;
        public GroceryItem lastCheckedItem;
        public bool itemStocked = true;
        public bool foundAisle = false;
        private Inventory inventory;
        public Vector3 targetLocation;
        public GameObject targetCheckSpot;
        public Aisle targetAisle;
        public GroceryItem targetGrocery;
        public bool firstCheck;
        public int minShelfValue = 2;
        public int AislesChecked = 0;
        public bool inventoryEmpty = true;

        public GameManger gM;



        // Start is called before the first frame update
        void Start()
        {
            GameManger gM = GameObject.FindGameObjectWithTag("GameController").GetComponent<GameManger>();

            aisles = gM.aislesMaster;

            //random generation
            lastCheckedAisleNumber = Random.Range(-1, aisles.Length - 2);
            lastCheckedItem = aisles[lastCheckedAisleNumber + 1].itemsOnShelf[Random.Range(0, aisles[lastCheckedAisleNumber + 1].itemsOnShelf.Length)];

            inventory = gameObject.GetComponent<Inventory>();
        }



        //item stocked is true and foundAisle is false  and inventory is empty
        public NodeVal FindAisle()
        {
            //if youve checked all the aisles then the first check is done
            if (AislesChecked > aisles.Length)
            {
                AislesChecked = 0;
                firstCheck = true;
                return NodeVal.Success;
            }
            if (lastCheckedAisleNumber + 1 >= aisles.Length)
            {
                lastCheckedAisleNumber = -1;
            }
            //check next aisle
            targetAisle = aisles[lastCheckedAisleNumber + 1];

            //go to a random check spot 
            targetCheckSpot = targetAisle.checkSpots[Random.Range(0, targetAisle.checkSpots.Length)];

            //set location to check spot position
            targetLocation = targetCheckSpot.transform.position;


            foundAisle = true;

            return NodeVal.Success;

        }

        //item stocked is true and foundAisle is true and first check is false and you are close enough to the check spot and inventory is empty
        public NodeVal checkItemFirst()
        {
            for (int i = 0; i < targetAisle.itemsOnShelf.Length; i++)
            {
                //set item you are checking
                GroceryItem checkingItem = targetAisle.itemsOnShelf[i];
                Stock itemShelf = checkingItem.Shelf;
                if (itemShelf.currentStock < minShelfValue)
                {
                    //found an item that needs to be stocked
                    AislesChecked = 0;
                    itemStocked = false;
                    targetGrocery = checkingItem;
                    targetLocation = targetGrocery.Supply.accessSpot.transform.position;
                    return NodeVal.Success;
                }
            }

            //aisle is minimally stocked, check next one
            foundAisle = false;
            AislesChecked += 1;
            lastCheckedAisleNumber += 1;
            return NodeVal.Success;
        }

        //item stocked is false and inventory is empty and you are close tnoought to the supply access point 
        public NodeVal getItem()
        {
            Stock targetStock = targetGrocery.Supply;
            targetStock.Take(minShelfValue + 2, inventory);
            if(inventory.currentInventory > 0)
            {
                inventoryEmpty = false;
                targetLocation = targetGrocery.accessSpot.transform.position;
                return NodeVal.Success;
            }

            print("Error: stock empty");
            itemStocked = true;
            return NodeVal.Success;
        }

        //item stocked is false and inventory isnt empty and found aisle is true and you are close enough to the shelf access point
        public NodeVal stockItem()
        {
            Stock targetSupply = targetGrocery.Shelf;
            targetSupply.AddMore(inventory.currentInventory, inventory);
            itemStocked = true;
            foundAisle = false;

            //check if inventory is empty
            if(inventory.currentInventory < 1)
            {
                inventoryEmpty = true;
            }
            return NodeVal.Success;
        }

        //if item stocked is true and inventory isnt empty and found aisle is false and you are close enough to the supply access point
        public NodeVal returnStock()
        {
            Stock targetStock = targetGrocery.Supply;
            targetStock.AddMore(inventory.currentInventory, inventory);

            //check if inventory is empty
            if (inventory.currentInventory < 1)
            {
                inventoryEmpty = true;

            }
            else
            {
                print("Stock Full: Cant Operate");
            }

            return NodeVal.Success;
        }

        //item stocked is true and aisle found false is true and first check is true
        public NodeVal checkItemSecond()
        {
            for (int i = 0; i < targetAisle.itemsOnShelf.Length; i++)
            {
                //set item you are checking
                GroceryItem checkingItem = targetAisle.itemsOnShelf[i];
                Stock itemShelf = checkingItem.Shelf;
                if (itemShelf.currentStock < itemShelf.stockMaxSize) //main change is here! uses stock max size instead of minShelfVlaue
                {
                    //found an item that needs to be stocked
                    AislesChecked = 0;
                    itemStocked = false;
                    targetGrocery = checkingItem;
                    targetLocation = targetGrocery.Supply.accessSpot.transform.position;
                    return NodeVal.Success;
                }
            }

            //aisle is minimally stocked, check next one
            foundAisle = false;
            AislesChecked += 1;
            lastCheckedAisleNumber += 1;
            return NodeVal.Success;
        }
    }
}
