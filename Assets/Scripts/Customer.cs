//%GenSrc:1:BBqcSehsi0SL7khHmTYa1w
/*
 * This code was generated by InstinctAI.
 *
 * It is safe to edit this file.
 */

using System.Runtime.CompilerServices;

namespace instinctai.usr.behaviours
{
    using UnityEngine;
    using com.kupio.instinctai;
    using System.Collections.Generic;

    public partial class Customer : MonoBehaviour
    {
        private GroceryItem[] groceryItems; //all possible grocery items
        //private Aisle[] aisles; //all items in store
        private Transform[] exitPoints; //all points a customer can go to leave
        private GameObject[] shoppingPaths; //array of shoppping paths to avoid walking through things yay
        private CheckOut[] checkOuts; //array of check outs

        //random generated factors
        public int listSize;
        public List<GroceryItem> shoppingList = new List<GroceryItem>(); 
        //List<Aisle> checkedAisles = new List<Aisle>(); //keeps track of waht aisles the customer has been on
        public int confusion; //0-100 how confused the shopper is

        private Cart cart;

        //movementManager
       // public int lastCheckedAisle;
        private Transform targetLocation;
        public GroceryItem targetGrocery;
        public Aisle currentAisle;
        //public int aislesChecked; //how many aisles in store you have checked
        List<Aisle> closeAisles = new List<Aisle>(); //keeps track of what aisles customer is close to
        public GameObject shoppingPath;
        public List<GameObject> shoppingPoints = new List<GameObject>();
        public int currentShoppingPoint;
        public float speed;

        //state manager
        public bool foundAisle; //is not searching for an aisle
        public bool foundItem = true; //is not searching for item
        public bool shoppingDone;
        public bool checkingOut;
        public bool gone;
        public bool spawned;
        public bool doneWithCurrentAisle = true;


        void Awake()
        {
            GameManger gM = GameObject.FindGameObjectWithTag("GameController").GetComponent<GameManger>();
            groceryItems = gM.groceryItemsMaster;
            //aisles = gM.aislesMaster;
            exitPoints = gM.exitPointsMaster;
            shoppingPaths = gM.shoppingPathsMaster;
            checkOuts = gM.checkOutsMaster;
            
            cart = gameObject.GetComponent<Cart>();


            //random generation
            confusion = Random.Range(0, 100);
            listSize = Random.Range(1, 10);
            speed = Random.Range(2, 8);
            while (shoppingList.Count < listSize)
            {
                bool inList;
                for (int i = 0; i < groceryItems.Length; i++)
                {
                    inList = false;
                    if(shoppingList.Count >= listSize)
                        break;
                    

                    int randomChance = Random.Range(0, 100);

                    foreach(GroceryItem g in shoppingList)
                    {
                        if (g.Equals(groceryItems[i]))
                        {
                            inList = true;
                        }
                    }

                    if (inList)
                    {
                        continue;
                    }
                    if (randomChance > 50)
                    {
                        shoppingList.Add(groceryItems[i]);
                    }
                }
               
            }

            //deceiding on a shopping path
            if(confusion > 75)
            {
                shoppingPath = shoppingPaths[Random.Range(0, shoppingPaths.Length - 1)];
            }
            else if(confusion > 50)
            {
                shoppingPath = shoppingPaths[shoppingPaths.Length - 1];
            }
            else
            {
                shoppingPath = shoppingPaths[0];
            }
            
            //add all the points from the shopping path to this customers shopping points
            foreach(Transform child in shoppingPath.transform)
            {
                shoppingPoints.Add(child.gameObject);
            }
           
        }
        
        //spawned is flase, found item is true, found aisle is false
        public NodeVal StartShopping()
        {
            //set target location to start of shopping path
            targetLocation = shoppingPoints[0].gameObject.transform;

            //check its the start
            if (!shoppingPoints[0].gameObject.CompareTag("Start"))
                throw new System.Exception("StartShopping cant find start of shopping path");
            spawned = true;
            currentShoppingPoint = 0;

            //move to starting point
            
            return NodeVal.Success;
        }

        //spawned is true, found item is true, found aisle is false, done with current aisle is true
        public NodeVal MoveToNextAisleStart()
        {
            //set target location to next spot
            if (currentShoppingPoint + 1 >= shoppingPoints.Count)
            {
                currentShoppingPoint = -1;
            }
            targetLocation = shoppingPoints[currentShoppingPoint + 1].gameObject.transform;
            currentShoppingPoint += 1;

            //if the next spot is the one you want, set variables
            if (shoppingPoints[currentShoppingPoint].gameObject.CompareTag("AisleStart"))
            {
                doneWithCurrentAisle = false;
                foundAisle = true;

                Aisle[] tmp = shoppingPoints[currentShoppingPoint].gameObject.GetComponent<PointInformation>().closeAisles;
                foreach (Aisle a in tmp)
                {
                    closeAisles.Add(a);
                }
            }

            return NodeVal.Success;
        }

        //spawned is true, found item is true, found aisle is true, done with current aisle is true
        public NodeVal MoveToAisleExit()
        {
            //set target location to next spot
            if (currentShoppingPoint + 1 >= shoppingPoints.Count)
            {
                currentShoppingPoint = -1;
            }
            targetLocation = shoppingPoints[currentShoppingPoint + 1].gameObject.transform;
            currentShoppingPoint += 1;

            //if the next spot is the one you want, set variables
            if (!shoppingPoints[currentShoppingPoint].gameObject.CompareTag("AisleExit"))
            {
                foundAisle = false;

                closeAisles.Clear();
            }
            
            return NodeVal.Success;
        }

        //spawned is true, found item is true, found aisle is false, done with current aisle is true, done shopping is true
        public NodeVal MoveToEnd()
        {
            //set target location to next spot
            if (currentShoppingPoint + 1 >= shoppingPoints.Count)
            {
                currentShoppingPoint = -1;
            }
            targetLocation = shoppingPoints[currentShoppingPoint + 1].gameObject.transform;
            currentShoppingPoint += 1;

            //if the next spot is the one you want, set variables
            if (!shoppingPoints[currentShoppingPoint].gameObject.CompareTag("End"))
            {
                checkingOut = true;
            }

            return NodeVal.Success;
        }

        //done shopping is true, checking out is false
        public NodeVal MoveToExit()
        {
            //set target location to next spot
            if (currentShoppingPoint + 1 >= shoppingPoints.Count)
            {
                currentShoppingPoint = -1;
            }
            targetLocation = shoppingPoints[currentShoppingPoint + 1].gameObject.transform;
            currentShoppingPoint += 1;

            //if the next spot is the one you want, set variables
            if (!shoppingPoints[currentShoppingPoint].gameObject.CompareTag("Exit"))
            {
                gone = true;
            }


            return NodeVal.Success;
        }

        public NodeVal MoveTowards()
        {
            transform.position = Vector3.MoveTowards(transform.position, targetLocation.position, speed * Time.deltaTime);
            return NodeVal.Success;
        }
        

        //checks the items on a particular aisle 
        //found aisle is true
        //foudn item is true
        //done with current aisle is false
        public NodeVal CheckItemsOnNearAisles()
        {
            foreach(Aisle a in closeAisles)
            {
                foreach (GroceryItem g in a.itemsOnShelf)
                {
                    foreach (GroceryItem h in shoppingList)
                    {
                        if (g.Equals(h))
                        {
                            //if any item is on the shoppin glist, found item is false  set target grocery item
                            targetGrocery = g;
                            targetLocation = targetGrocery.accessSpot;
                            foundItem = false;
                            return NodeVal.Success;
                        }
                    }
                }
            }
            //search all items on both aisle


            foundAisle = false;
            doneWithCurrentAisle = true;
            return NodeVal.Success;
        }

        //gets the item youre looking for
        //found aisle is true
        //found item is false
        public NodeVal getItem()
        {
            Stock targetStock = targetGrocery.Shelf;
            //take up to 3
            bool successful = targetStock.AddToCart(Random.Range(1, 3), cart, targetGrocery);

            //if the stock was empty
            if (!successful)
            {
                //customer is mad, show emotiocon
                print("Im Mad");

            }

            //done searchign for  item
            foundItem = true;

            //remove the grocery from your shopping list!
            shoppingList.Remove(targetGrocery);
            
            //if everything is off ur shopping list ur done shopping
            if(shoppingList.Count < 1)
            {
                shoppingDone = true;
            }
            
            return NodeVal.Success;
        }


        //checking out is true and gone is false
        public NodeVal checkout()
        {
            checkingOut = true;

            //thsi return the closest exit point 
            Transform best = null;
            float smallestDistance = 0;
            foreach (Transform t in exitPoints)
            {
                if (best == null) //first object in check spots
                {
                    best = t;
                    smallestDistance = Vector3.Distance(t.position, this.transform.position);
                }
                else
                {
                    //if the distance between the next is great
                    float distance = Vector3.Distance(t.position, this.transform.position);
                    if (distance < smallestDistance)
                    {
                        smallestDistance = distance;
                        best = t;
                    }
                }
            }
            targetLocation = best;

            checkingOut = true;
            return NodeVal.Success;
        }

        //if gone is true
        public NodeVal Leave()
        {
            Destroy(this.gameObject);
            return NodeVal.Success;
        }

    } 
}
